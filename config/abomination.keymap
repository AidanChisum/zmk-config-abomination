/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/outputs.h>

/ {
        macros {
                /**
                * Temporarily switches to a layer (`&mo`) while a modifier is held.
                * Analogous to QMK's `LM()`, using a parameterized macro.
                *
                * Params:
                *  1. Layer to switch to
                *  2. Modifier to press while layer is active
                *
                * Example:
                *  `&lm NUM_LAYER LSHIFT`
                */
                lm: lm {
                label = "LAYER_MOD";
                compatible = "zmk,behavior-macro-two-param";
                wait-ms = <0>;
                tap-ms = <0>;
                #binding-cells = <2>;
                bindings
                = <&macro_param_1to1>
                , <&macro_press &mo MACRO_PLACEHOLDER>
                , <&macro_param_2to1>
                , <&macro_press &kp MACRO_PLACEHOLDER>
                , <&macro_pause_for_release>
                , <&macro_param_2to1>
                , <&macro_release &kp MACRO_PLACEHOLDER>
                , <&macro_param_1to1>
                , <&macro_release &mo MACRO_PLACEHOLDER>
                ;
                };
        };
};

#define DEFAULT 0
#define NUMBER   1
#define FUNCTION 2
#define GAMING  3
#define GAMING2  4


/ {
        keymap {
                compatible = "zmk,keymap";

                default_layer {
// -----------------------------------------------------------------------------------------
// |  TAB |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  | BKSP |
// | CTRL |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  |  '   |
// | SHFT |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  | ESC  |
//                    | GUI | LWR | SPC |   | ENT | RSE  | ALT |
                        bindings = <
   &kp ESC &kp Q       &kp W       &kp E      &kp R      &kp T       &kp Y &kp U      &kp I      &kp O      &kp P          &kp BSPC
   &kp TAB &mt LCTRL A &mt LSHFT S &mt LGUI D &mt LALT F &kp G       &kp H &mt LALT J &mt LGUI K &mt LSHFT L &mt RCTRL SEMI &kp SQT
   &kp LCTRL &kp LSHFT &kp Z       &kp X      &kp C      &kp V       &kp B &kp N      &kp M      &kp COMMA   &kp DOT        &mt RSHFT FSLH
   &lm NUMBER LSHFT &lt FUNCTION SPACE  &lt NUMBER ENTER            &lt NUMBER ENTER &lt FUNCTION SPACE &lm NUMBER LSHFT
                        >;
                };
                layer_1 {
// -----------------------------------------------------------------------------------------
// |  TAB |  1  |  2  |  3  |  4  |  5  |   |  6  |  7  |  8  |  9  |  0  | BKSP |
// | BTCLR| BT1 | BT2 | BT3 | BT4 | BT5 |   | LFT | DWN |  UP | RGT |     |      |
// | SHFT |     |     |     |     |     |   |     |     |     |     |     |      |
//                    | GUI |     | SPC |   | ENT |     | ALT |
                        bindings = <
   &kp TILDE &kp N1       &kp N2    &kp N3     &kp N4    &kp N5      &kp N7 &kp N8   &kp N9     &kp N0      &kp MINUS     &kp PLUS
   &trans    &trans    &trans    &trans    &trans    &trans         &kp N4 &kp N5   &kp N6     &kp LBRC    &kp RBRC      &kp BSLH
   &trans   &trans     &trans     &trans    &trans    &trans         &kp N1 &kp N2   &kp N3     &trans      &trans        &kp DEL
                            &trans     &trans       &trans      &trans  &trans   &trans
                        >;
                };

                layer_2 {
// -----------------------------------------------------------------------------------------
// |  TAB |  !  |  @  |  #  |  $  |  %  |   |  ^  |  &  |  *  |  (  |  )  | BKSP |
// | CTRL |     |     |     |     |     |   |  -  |  =  |  [  |  ]  |  \  |  `   |
// | SHFT |     |     |     |     |     |   |  _  |  +  |  {  |  }  | "|" |  ~   |
//                    | GUI |     | SPC |   | ENT |     | ALT |
                        bindings = <
   &kp  F1  &kp F2 &kp F3 &kp F4 &kp F5 &kp F6                      &kp F7 &kp F8  &kp F9 &kp F10 &kp F11 &kp F12
   &mt LSHFT CAPS &trans   &trans &trans   &trans   &to GAMING     &kp PG_UP &kp LEFT &kp RIGHT &kp UP &kp DOWN &kp PG_DN
   &kp LCTRL &kp LGUI &kp LALT &trans   &trans   &trans            &bt BT_CLR &bt BT_SEL 0 &bt BT_SEL 1 &bt BT_SEL 2 &bt BT_SEL 3 &bt BT_SEL 4 
                             &trans &trans   &trans                 &trans   &trans    &trans
                        >;
                };

                gaming {
// -----------------------------------------------------------------------------------------
// |  TAB |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  | BKSP |
// | CTRL |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  |  '   |
// | SHFT |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  | ESC  |
//                    | GUI | LWR | SPC |   | ENT | RSE  | ALT |
                        bindings = <
   &kp ESC &kp N1 &kp Q    &kp W    &kp E   &kp R      &none  &none &none &none  &none &none
   &kp TAB &kp LSHFT  &kp A  &kp S  &kp D  &kp F       &none  &none &none &none &kp UP &none 
   &kp T  &kp LCTRL  &kp Z   &kp X  &kp C  &kp V       &none  &none &none &kp LEFT &kp DOWN &kp RIGHT
                  &lt GAMING2 B &kp SPACE  &kp G                 &none  &none &none
                        >;
                };
                
                gaming2 {
// -----------------------------------------------------------------------------------------
// |  TAB |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  | BKSP |
// | CTRL |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  |  '   |
// | SHFT |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  | ESC  |
//                    | GUI | LWR | SPC |   | ENT | RSE  | ALT |
                        bindings = <
   &trans &trans &trans  &trans &trans &trans      &trans &trans &trans &trans &trans &to DEFAULT
   &trans &trans &trans  &trans &trans &trans      &trans &trans &trans &trans &trans &trans 
   &trans &trans &trans  &trans &trans &trans      &trans &trans &trans &trans &trans &trans
                   &trans &trans &trans                 &trans &trans &trans
                        >;
                };
        };
};

/**
#define COMBO_TIMEOUT 60


/ {
    combos {
        compatible = "zmk,combos";
 	 combo_del {
            timeout-ms = <COMBO_TIMEOUT>;
            key-positions = <11 12 13>;
            bindings = <&mt RALT DEL>;
        };
	 combo_cw {
            timeout-ms = <COMBO_TIMEOUT>;
            key-positions = <2 3 4>;
            bindings = <&caps_word>;
        };
	 combo_tab {
            timeout-ms = <COMBO_TIMEOUT>;
            key-positions = <10 11 12>;
            bindings = <&mt K_CONTEXT_MENU TAB>;
        };
	 combo_row {
            timeout-ms = <COMBO_TIMEOUT>;
            key-positions = <12 13 14>;
            bindings = <&kp LS(HOME)>;
        };
	 combo_esc {
            timeout-ms = <COMBO_TIMEOUT>;
            key-positions = <0 1 2>;
            bindings = <&kp ESC>;
	 };
	 combo_ctlbksp {
            timeout-ms = <COMBO_TIMEOUT>;
            key-positions = <6 7 8>;
            bindings = <&kp LC(BSPC)>;
        };
	 combo_bksp {
            timeout-ms = <COMBO_TIMEOUT>;
            key-positions = <16 17 18>;
            bindings = <&kp BSPC>;
        };
    };
};

&caps_word {
	continue-list = <UNDERSCORE MINUS BACKSPACE DELETE HOME END LEFT RIGHT>;
};

&kscan0 {
	debounce-period = <20>;
	};

/ {
	behaviors {

        bh: layer_taps 
		{
			compatible = "zmk,behavior-hold-tap";
			label = "Layer-Tap";
			#binding-cells = <2>;
			tapping_term_ms = <215>;
            flavor = "tap-preferred";
			bindings = <&mo>, <&kp>;
        };

        hm: homerow_mods {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS";
            #binding-cells = <2>;
            tapping-term-ms = <170>;
            quick_tap_ms = <0>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
        };
		sm: shift_mods {
            compatible = "zmk,behavior-hold-tap";
            label = "SHIFT_MODS";
            #binding-cells = <2>;
            tapping-term-ms = <170>;
            quick_tap_ms = <0>;
            flavor = "hold-preferred";
            bindings = <&kp>, <&kp>;
        };
     };
   };

/ {
        keymap {
                compatible = "zmk,keymap";

                default_layer {
// -----------------------------------------------------------------------------------------
// |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  | 
// |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  |
// |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  | 
//             | GUI | LWR | ENT |   | SPC | RSE  | ALT |
                        bindings = <
   &kp Q &kp W &kp E &kp R &kp T   &kp Y &kp U  &kp I     &kp O   &kp P
   &bh 3 A &kp S &kp D &kp F &kp G   &kp H &kp J  &kp K &kp L   &kp SQT
   &mt LSHFT Z &kp X &kp C &kp V &kp B   &kp N &kp M  &kp COMMA &kp DOT &mt RSHFT FSLH
        &kp LGUI &bh 1 HOME &mt LCTRL RET   &kp SPACE &bh 2 END &mt RALT LG(V)
                        >;
		label = "BASE";
                };
                lower_layer {

                        bindings = <
   &bt BT_SEL 0 &bt BT_SEL 1 &bt BT_SEL 2 &bt BT_SEL 3 &bt BT_CLR     &kp PG_UP &kp N7 &kp N8 &kp N9 &kp BSPC
   &kp F2       &hm LCTRL F3  &hm LSHFT F4  &hm LALT F5  &hm LGUI F6         &kp PG_DN &kp N4 &kp N5 &kp N6 &kp BSLH
   &kp F7       &kp F8       &kp F10      &kp F11      &kp F12        &kp INS &kp N1 &kp N2 &kp N3  &kp LC(RET)
               	        &kp LC(LA(LSHFT)) &trans       &mt RALT RET      &mt LCTRL F1  &kp N0  &mt LSHFT DOT
                        >;
		label = "Numbers";
                };

                raise_layer {

                        bindings = <
   &kp EXCL &kp AT &kp HASH &kp DLLR &kp PRCNT             &kp CARET &kp AMPS  &kp KP_MULTIPLY &kp LPAR &kp RPAR 
   &kp TAB   &kp CAPS &kp F13   &out OUT_TOG &kp LGUI      &kp MINUS &kp EQUAL &kp LBRC &kp RBRC &kp PIPE 
   &kp ESC   &kp GRAVE &kp QMARK   &kp F9   &kp F17             &kp UNDER &kp PLUS  &kp LBKT &kp RBKT &kp BSLH 
        	     &kp LCTRL &kp LALT   &mt LSHFT LS(INS)   &kp RET   &trans    &mt RALT TILDE
                        >;
		label = "Symbols";
		};
		
		danger_layer {

                        bindings = <
   &bootloader  &kp AT &kp HASH &kp PAUSE_BREAK &kp SLCK              &kp C_VOL_UP &hm LC(V) LC(C)  &hello &kp LC(LA(DEL)) &bootloader 
   &trans   &trans &kp LC(LSHFT)  &mt LSHFT UP   &mt LCTRL PSCRN   &kp C_VOL_DN &trans &trans        &kp UP &kp SEMI 
   &kp LNLCK   &trans &kp LEFT &kp DOWN &kp RIGHT              &kp C_MUTE &trans  &kp LEFT        &kp DOWN &kp RIGHT 
        	     &kp LG(Z) &kp LG(X)   &kp LG(C)   &kp LC(LA(W))   &kp LC(LA(P))    &kp LC(LA(R))
                        >;
                label = "**DANGER**";
		};
        };
};
**/